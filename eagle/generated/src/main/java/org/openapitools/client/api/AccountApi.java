/*
 * Take home tech task
 * We want you to create a REST API for Eagle Bank which conforms to this OpenAPI specification which allows a user to create, fetch, update and delete a bank account and deposit or withdraw money from the account. These will be stored as transactions against a bank account which be retrieved but not modified or deleted.
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BadRequestErrorResponse;
import org.openapitools.client.model.BankAccountResponse;
import org.openapitools.client.model.CreateBankAccountRequest;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.ListBankAccountsResponse;
import org.openapitools.client.model.UpdateBankAccountRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createAccount
     * @param createBankAccountRequest Create a new bank account for the user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Bank Account has been created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid details supplied </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not allowed to access the transaction </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAccountCall(@javax.annotation.Nonnull CreateBankAccountRequest createBankAccountRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createBankAccountRequest;

        // create path and map variables
        String localVarPath = "/v1/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAccountValidateBeforeCall(@javax.annotation.Nonnull CreateBankAccountRequest createBankAccountRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createBankAccountRequest' is set
        if (createBankAccountRequest == null) {
            throw new ApiException("Missing the required parameter 'createBankAccountRequest' when calling createAccount(Async)");
        }

        return createAccountCall(createBankAccountRequest, _callback);

    }

    /**
     * 
     * Create a new bank account
     * @param createBankAccountRequest Create a new bank account for the user (required)
     * @return BankAccountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Bank Account has been created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid details supplied </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not allowed to access the transaction </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public BankAccountResponse createAccount(@javax.annotation.Nonnull CreateBankAccountRequest createBankAccountRequest) throws ApiException {
        ApiResponse<BankAccountResponse> localVarResp = createAccountWithHttpInfo(createBankAccountRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new bank account
     * @param createBankAccountRequest Create a new bank account for the user (required)
     * @return ApiResponse&lt;BankAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Bank Account has been created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid details supplied </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not allowed to access the transaction </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BankAccountResponse> createAccountWithHttpInfo(@javax.annotation.Nonnull CreateBankAccountRequest createBankAccountRequest) throws ApiException {
        okhttp3.Call localVarCall = createAccountValidateBeforeCall(createBankAccountRequest, null);
        Type localVarReturnType = new TypeToken<BankAccountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new bank account
     * @param createBankAccountRequest Create a new bank account for the user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Bank Account has been created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid details supplied </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not allowed to access the transaction </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAccountAsync(@javax.annotation.Nonnull CreateBankAccountRequest createBankAccountRequest, final ApiCallback<BankAccountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAccountValidateBeforeCall(createBankAccountRequest, _callback);
        Type localVarReturnType = new TypeToken<BankAccountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAccountByAccountNumber
     * @param accountNumber Account number of the bank account (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The bank account has been deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request didn&#39;t supply all the necessary data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not allowed to delete the bank account details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bank account was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccountByAccountNumberCall(@javax.annotation.Nonnull String accountNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/accounts/{accountNumber}"
            .replace("{" + "accountNumber" + "}", localVarApiClient.escapeString(accountNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAccountByAccountNumberValidateBeforeCall(@javax.annotation.Nonnull String accountNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountNumber' is set
        if (accountNumber == null) {
            throw new ApiException("Missing the required parameter 'accountNumber' when calling deleteAccountByAccountNumber(Async)");
        }

        return deleteAccountByAccountNumberCall(accountNumber, _callback);

    }

    /**
     * 
     * Delete account by account number.
     * @param accountNumber Account number of the bank account (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The bank account has been deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request didn&#39;t supply all the necessary data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not allowed to delete the bank account details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bank account was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAccountByAccountNumber(@javax.annotation.Nonnull String accountNumber) throws ApiException {
        deleteAccountByAccountNumberWithHttpInfo(accountNumber);
    }

    /**
     * 
     * Delete account by account number.
     * @param accountNumber Account number of the bank account (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The bank account has been deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request didn&#39;t supply all the necessary data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not allowed to delete the bank account details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bank account was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAccountByAccountNumberWithHttpInfo(@javax.annotation.Nonnull String accountNumber) throws ApiException {
        okhttp3.Call localVarCall = deleteAccountByAccountNumberValidateBeforeCall(accountNumber, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete account by account number.
     * @param accountNumber Account number of the bank account (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The bank account has been deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request didn&#39;t supply all the necessary data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not allowed to delete the bank account details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bank account was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccountByAccountNumberAsync(@javax.annotation.Nonnull String accountNumber, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAccountByAccountNumberValidateBeforeCall(accountNumber, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchAccountByAccountNumber
     * @param accountNumber Account number of the bank account (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The bank account details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request didn&#39;t supply all the necessary data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The user was not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not allowed to access the bank account details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bank account was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchAccountByAccountNumberCall(@javax.annotation.Nonnull String accountNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/accounts/{accountNumber}"
            .replace("{" + "accountNumber" + "}", localVarApiClient.escapeString(accountNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchAccountByAccountNumberValidateBeforeCall(@javax.annotation.Nonnull String accountNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountNumber' is set
        if (accountNumber == null) {
            throw new ApiException("Missing the required parameter 'accountNumber' when calling fetchAccountByAccountNumber(Async)");
        }

        return fetchAccountByAccountNumberCall(accountNumber, _callback);

    }

    /**
     * 
     * Fetch account by account number.
     * @param accountNumber Account number of the bank account (required)
     * @return BankAccountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The bank account details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request didn&#39;t supply all the necessary data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The user was not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not allowed to access the bank account details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bank account was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public BankAccountResponse fetchAccountByAccountNumber(@javax.annotation.Nonnull String accountNumber) throws ApiException {
        ApiResponse<BankAccountResponse> localVarResp = fetchAccountByAccountNumberWithHttpInfo(accountNumber);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch account by account number.
     * @param accountNumber Account number of the bank account (required)
     * @return ApiResponse&lt;BankAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The bank account details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request didn&#39;t supply all the necessary data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The user was not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not allowed to access the bank account details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bank account was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BankAccountResponse> fetchAccountByAccountNumberWithHttpInfo(@javax.annotation.Nonnull String accountNumber) throws ApiException {
        okhttp3.Call localVarCall = fetchAccountByAccountNumberValidateBeforeCall(accountNumber, null);
        Type localVarReturnType = new TypeToken<BankAccountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch account by account number.
     * @param accountNumber Account number of the bank account (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The bank account details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request didn&#39;t supply all the necessary data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The user was not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not allowed to access the bank account details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bank account was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchAccountByAccountNumberAsync(@javax.annotation.Nonnull String accountNumber, final ApiCallback<BankAccountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchAccountByAccountNumberValidateBeforeCall(accountNumber, _callback);
        Type localVarReturnType = new TypeToken<BankAccountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAccounts
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of bank accounts </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAccountsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAccountsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listAccountsCall(_callback);

    }

    /**
     * 
     * List accounts
     * @return ListBankAccountsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of bank accounts </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ListBankAccountsResponse listAccounts() throws ApiException {
        ApiResponse<ListBankAccountsResponse> localVarResp = listAccountsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * List accounts
     * @return ApiResponse&lt;ListBankAccountsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of bank accounts </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListBankAccountsResponse> listAccountsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listAccountsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ListBankAccountsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List accounts
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of bank accounts </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAccountsAsync(final ApiCallback<ListBankAccountsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAccountsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ListBankAccountsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAccountByAccountNumber
     * @param accountNumber Account number of the bank account (required)
     * @param updateBankAccountRequest Update bank account details for the user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated bank account details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request didn&#39;t supply all the necessary data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not allowed to update the bank account details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bank account was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccountByAccountNumberCall(@javax.annotation.Nonnull String accountNumber, @javax.annotation.Nonnull UpdateBankAccountRequest updateBankAccountRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateBankAccountRequest;

        // create path and map variables
        String localVarPath = "/v1/accounts/{accountNumber}"
            .replace("{" + "accountNumber" + "}", localVarApiClient.escapeString(accountNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAccountByAccountNumberValidateBeforeCall(@javax.annotation.Nonnull String accountNumber, @javax.annotation.Nonnull UpdateBankAccountRequest updateBankAccountRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountNumber' is set
        if (accountNumber == null) {
            throw new ApiException("Missing the required parameter 'accountNumber' when calling updateAccountByAccountNumber(Async)");
        }

        // verify the required parameter 'updateBankAccountRequest' is set
        if (updateBankAccountRequest == null) {
            throw new ApiException("Missing the required parameter 'updateBankAccountRequest' when calling updateAccountByAccountNumber(Async)");
        }

        return updateAccountByAccountNumberCall(accountNumber, updateBankAccountRequest, _callback);

    }

    /**
     * 
     * Update account by account number.
     * @param accountNumber Account number of the bank account (required)
     * @param updateBankAccountRequest Update bank account details for the user (required)
     * @return BankAccountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated bank account details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request didn&#39;t supply all the necessary data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not allowed to update the bank account details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bank account was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public BankAccountResponse updateAccountByAccountNumber(@javax.annotation.Nonnull String accountNumber, @javax.annotation.Nonnull UpdateBankAccountRequest updateBankAccountRequest) throws ApiException {
        ApiResponse<BankAccountResponse> localVarResp = updateAccountByAccountNumberWithHttpInfo(accountNumber, updateBankAccountRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Update account by account number.
     * @param accountNumber Account number of the bank account (required)
     * @param updateBankAccountRequest Update bank account details for the user (required)
     * @return ApiResponse&lt;BankAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated bank account details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request didn&#39;t supply all the necessary data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not allowed to update the bank account details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bank account was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BankAccountResponse> updateAccountByAccountNumberWithHttpInfo(@javax.annotation.Nonnull String accountNumber, @javax.annotation.Nonnull UpdateBankAccountRequest updateBankAccountRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAccountByAccountNumberValidateBeforeCall(accountNumber, updateBankAccountRequest, null);
        Type localVarReturnType = new TypeToken<BankAccountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update account by account number.
     * @param accountNumber Account number of the bank account (required)
     * @param updateBankAccountRequest Update bank account details for the user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated bank account details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request didn&#39;t supply all the necessary data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not allowed to update the bank account details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bank account was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccountByAccountNumberAsync(@javax.annotation.Nonnull String accountNumber, @javax.annotation.Nonnull UpdateBankAccountRequest updateBankAccountRequest, final ApiCallback<BankAccountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAccountByAccountNumberValidateBeforeCall(accountNumber, updateBankAccountRequest, _callback);
        Type localVarReturnType = new TypeToken<BankAccountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
