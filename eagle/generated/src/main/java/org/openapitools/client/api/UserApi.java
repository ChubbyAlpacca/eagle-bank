/*
 * Take home tech task
 * We want you to create a REST API for Eagle Bank which conforms to this OpenAPI specification which allows a user to create, fetch, update and delete a bank account and deposit or withdraw money from the account. These will be stored as transactions against a bank account which be retrieved but not modified or deleted.
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BadRequestErrorResponse;
import org.openapitools.client.model.CreateUserRequest;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.UpdateUserRequest;
import com.takehome.eagle.model.UserResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UserApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createUser
     * @param createUserRequest Create a new user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> User has been created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid details supplied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUserCall(@javax.annotation.Nonnull CreateUserRequest createUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUserRequest;

        // create path and map variables
        String localVarPath = "/v1/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createUserValidateBeforeCall(@javax.annotation.Nonnull CreateUserRequest createUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createUserRequest' is set
        if (createUserRequest == null) {
            throw new ApiException("Missing the required parameter 'createUserRequest' when calling createUser(Async)");
        }

        return createUserCall(createUserRequest, _callback);

    }

    /**
     * 
     * Create a new user
     * @param createUserRequest Create a new user (required)
     * @return UserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> User has been created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid details supplied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public UserResponse createUser(@javax.annotation.Nonnull CreateUserRequest createUserRequest) throws ApiException {
        ApiResponse<UserResponse> localVarResp = createUserWithHttpInfo(createUserRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new user
     * @param createUserRequest Create a new user (required)
     * @return ApiResponse&lt;UserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> User has been created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid details supplied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserResponse> createUserWithHttpInfo(@javax.annotation.Nonnull CreateUserRequest createUserRequest) throws ApiException {
        okhttp3.Call localVarCall = createUserValidateBeforeCall(createUserRequest, null);
        Type localVarReturnType = new TypeToken<UserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new user
     * @param createUserRequest Create a new user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> User has been created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid details supplied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUserAsync(@javax.annotation.Nonnull CreateUserRequest createUserRequest, final ApiCallback<UserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createUserValidateBeforeCall(createUserRequest, _callback);
        Type localVarReturnType = new TypeToken<UserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteUserByID
     * @param userId ID of the user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user has been deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request didn&#39;t supply all the necessary data </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User was not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not allowed to access the transaction </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A user cannot be deleted when they are associated with a bank account </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserByIDCall(@javax.annotation.Nonnull String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/{userId}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserByIDValidateBeforeCall(@javax.annotation.Nonnull String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteUserByID(Async)");
        }

        return deleteUserByIDCall(userId, _callback);

    }

    /**
     * 
     * Delete user by ID.
     * @param userId ID of the user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user has been deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request didn&#39;t supply all the necessary data </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User was not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not allowed to access the transaction </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A user cannot be deleted when they are associated with a bank account </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public void deleteUserByID(@javax.annotation.Nonnull String userId) throws ApiException {
        deleteUserByIDWithHttpInfo(userId);
    }

    /**
     * 
     * Delete user by ID.
     * @param userId ID of the user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user has been deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request didn&#39;t supply all the necessary data </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User was not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not allowed to access the transaction </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A user cannot be deleted when they are associated with a bank account </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteUserByIDWithHttpInfo(@javax.annotation.Nonnull String userId) throws ApiException {
        okhttp3.Call localVarCall = deleteUserByIDValidateBeforeCall(userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete user by ID.
     * @param userId ID of the user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user has been deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request didn&#39;t supply all the necessary data </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User was not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not allowed to access the transaction </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A user cannot be deleted when they are associated with a bank account </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserByIDAsync(@javax.annotation.Nonnull String userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserByIDValidateBeforeCall(userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserByID
     * @param userId ID of the user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request didn&#39;t supply all the necessary data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not allowed to access the transaction </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserByIDCall(@javax.annotation.Nonnull String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/{userId}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserByIDValidateBeforeCall(@javax.annotation.Nonnull String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling fetchUserByID(Async)");
        }

        return fetchUserByIDCall(userId, _callback);

    }

    /**
     * 
     * Fetch user by ID.
     * @param userId ID of the user (required)
     * @return UserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request didn&#39;t supply all the necessary data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not allowed to access the transaction </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public UserResponse fetchUserByID(@javax.annotation.Nonnull String userId) throws ApiException {
        ApiResponse<UserResponse> localVarResp = fetchUserByIDWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch user by ID.
     * @param userId ID of the user (required)
     * @return ApiResponse&lt;UserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request didn&#39;t supply all the necessary data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not allowed to access the transaction </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserResponse> fetchUserByIDWithHttpInfo(@javax.annotation.Nonnull String userId) throws ApiException {
        okhttp3.Call localVarCall = fetchUserByIDValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<UserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch user by ID.
     * @param userId ID of the user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request didn&#39;t supply all the necessary data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not allowed to access the transaction </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserByIDAsync(@javax.annotation.Nonnull String userId, final ApiCallback<UserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserByIDValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<UserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateUserByID
     * @param userId ID of the user (required)
     * @param updateUserRequest Update user details (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated user details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request didn&#39;t supply all the necessary data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not allowed to access the transaction </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserByIDCall(@javax.annotation.Nonnull String userId, @javax.annotation.Nonnull UpdateUserRequest updateUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateUserRequest;

        // create path and map variables
        String localVarPath = "/v1/users/{userId}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserByIDValidateBeforeCall(@javax.annotation.Nonnull String userId, @javax.annotation.Nonnull UpdateUserRequest updateUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateUserByID(Async)");
        }

        // verify the required parameter 'updateUserRequest' is set
        if (updateUserRequest == null) {
            throw new ApiException("Missing the required parameter 'updateUserRequest' when calling updateUserByID(Async)");
        }

        return updateUserByIDCall(userId, updateUserRequest, _callback);

    }

    /**
     * 
     * Update user by ID.
     * @param userId ID of the user (required)
     * @param updateUserRequest Update user details (required)
     * @return UserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated user details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request didn&#39;t supply all the necessary data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not allowed to access the transaction </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public UserResponse updateUserByID(@javax.annotation.Nonnull String userId, @javax.annotation.Nonnull UpdateUserRequest updateUserRequest) throws ApiException {
        ApiResponse<UserResponse> localVarResp = updateUserByIDWithHttpInfo(userId, updateUserRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Update user by ID.
     * @param userId ID of the user (required)
     * @param updateUserRequest Update user details (required)
     * @return ApiResponse&lt;UserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated user details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request didn&#39;t supply all the necessary data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not allowed to access the transaction </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserResponse> updateUserByIDWithHttpInfo(@javax.annotation.Nonnull String userId, @javax.annotation.Nonnull UpdateUserRequest updateUserRequest) throws ApiException {
        okhttp3.Call localVarCall = updateUserByIDValidateBeforeCall(userId, updateUserRequest, null);
        Type localVarReturnType = new TypeToken<UserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update user by ID.
     * @param userId ID of the user (required)
     * @param updateUserRequest Update user details (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated user details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request didn&#39;t supply all the necessary data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access token is missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not allowed to access the transaction </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserByIDAsync(@javax.annotation.Nonnull String userId, @javax.annotation.Nonnull UpdateUserRequest updateUserRequest, final ApiCallback<UserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserByIDValidateBeforeCall(userId, updateUserRequest, _callback);
        Type localVarReturnType = new TypeToken<UserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
